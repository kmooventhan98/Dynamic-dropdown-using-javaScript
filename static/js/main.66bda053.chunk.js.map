{"version":3,"sources":["components/card/card.component.jsx","components/card-list/car-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAK,SAACC,GAAD,OAEV,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,6BAAKN,EAAMI,QAAQG,YCFlBC,G,MAAS,SAACR,GAAD,OAGlB,qBAAKC,UAAU,YAAf,SAEKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCTnBM,G,MAAW,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,aACrC,OACA,uBACMZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCHG,E,kDAvCb,aAAc,IAAD,8BACX,gBAeFH,aAAa,SAACI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAfpC,EAAKC,MAAM,CACTb,SAAU,GACVU,YAAa,IAJJ,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACT,SAAUkB,S,oBAQxC,WAAS,IAAD,EAC2BC,KAAKN,MAA9Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAClD,OACE,sBAAK9B,UAAU,MAAf,UACE,oBAAIA,UAAU,UAAd,8BACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAjCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.66bda053.chunk.js","sourcesContent":["import React from 'react'\nimport './card.style.css';\n\nexport const Card=(props)=> (\n    \n        <div className=\"card-container\">\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set1&size=180x180`}/>\n            <h1> {props.monster.name} </h1>\n            <h4>{props.monster.email}</h4>\n        </div>\n    \n);\n","import React from 'react';\nimport {Card} from '../card/card.component';\nimport './card-list.styles.css';\n\n\n\nexport const CardList=(props)=> (\n\n\n    <div className=\"card-list\">\n      {\n         props.monsters.map(monster=>(\n             <Card key={monster.id} monster={monster} />\n         ))\n        }\n   </div>\n\n);","import React from 'react';\nimport './search-box.style.css';\n\nexport const SearchBox= ({placeholder, handleChange})=> {\n  return( \n  <input\n        className=\"search\"\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n  />\n  )\n};","import './App.css';\nimport React,{ Component } from 'react';\nimport {CardList} from './components/card-list/car-list.component'\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      monsters: [],\n      searchField: ''\n    };\n    \n  }\n  \n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response=>response.json())\n    .then(users=>this.setState({monsters: users}))\n\n  }\n\n  handleChange=(e)=>{\n   this.setState({searchField: e.target.value})\n  }\n\n  render(){\n    const { monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return(\n      <div className='App'>\n        <h1 className='heading'>Monsoers Rolodex</h1>\n        <SearchBox\n          placeholder='Search Monsters'\n          handleChange={this.handleChange}\n        />\n\n        <CardList monsters={filteredMonsters}/>\n             \n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}